C51 COMPILER V9.52.0.0   TMP100                                                            09/18/2014 16:25:03 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE TMP100
OBJECT MODULE PLACED IN tmp100.OBJ
COMPILER INVOKED BY: E:\KeilC\Keil2\C51\BIN\C51.EXE tmp100.c BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /****************************************/
   2          /* Configure Funcion for tmp100     */
   3          /* Temperature Sensor         */
   4          /* Author: Wu Tongda          */
   5          /* Tsinghua EE NICS           */
   6          /* Final Time: 2014/04/17       */
   7          /****************************************/
   8          #include "tmp100.h"
   9          #include "LCD.h"
  10          
  11          /*****************************************/
  12          /* Prepare of tmp100           */
  13          /*****************************************/
  14          void tmpPre(){
  15   1        I2C_rst();
  16   1        I2C_initial();
  17   1        
  18   1        // Slave Address
  19   1        //ADDR0 = 0;
  20   1        //ADDR1 = 0;  
  21   1      }
  22          
  23          /*****************************************/
  24          /* initialization of tmp100        */
  25          /* resolution: 12bits;           */
  26          /* range: -55~125;             */
  27          /* Continuous Mode.            */
  28          /*****************************************/
  29          void tmpInit(){
  30   1        uchar cmd[2]; 
  31   1      
  32   1        tmpPre();
  33   1      
  34   1        // Configuration
  35   1        cmd[0] = 0x60;  // 0110_0000 1ShutDown/0Continuous
  36   1        cmd[1] = 0x00;
  37   1        I2C_w(TMP100_SLA_ADDR, TMP100_CON_ADDR, cmd, 1);
  38   1        cmd[0] = 0xC9;
  39   1        cmd[1] = 0x00;
  40   1        I2C_w(TMP100_SLA_ADDR, TMP100_TML_ADDR, cmd, 2);
  41   1        cmd[0] = 0x7D;
  42   1        cmd[1] = 0x00;
  43   1        I2C_w(TMP100_SLA_ADDR, TMP100_TMH_ADDR, cmd, 2);
  44   1      }
  45          
  46          /****************************************/
  47          /* Set resolution of tmp100       */
  48          /* resolution(4-steps):         */
  49          /*  9bits(res=0),           */
  50          /*  10bits(res=1),            */
  51          /*  11bits(res=2),            */
  52          /*  12bits(res=3).            */
  53          /****************************************/
  54          void tmpSetRes(uint res){
  55   1        uchar cmd;
C51 COMPILER V9.52.0.0   TMP100                                                            09/18/2014 16:25:03 PAGE 2   

  56   1      
  57   1        tmpPre();
  58   1      
  59   1        if(res>3||res<0){
  60   2          LCD_show(0xEAA0);
  61   2          DelayMS(1000); 
  62   2          return;
  63   2        }
  64   1      
  65   1        I2C_r(TMP100_SLA_ADDR, TMP100_CON_ADDR, &cmd, 1);
  66   1        
  67   1        if(res==0)          // 9bits
  68   1          cmd = (cmd&0x9F)|0x00;
  69   1        else if(res==1)       // 10bits
  70   1          cmd = (cmd&0x9F)|0x20;
  71   1        else if(res==2)       // 11bits
  72   1          cmd = (cmd&0x9F)|0x40;
  73   1        else if(res==3)       // 12bits
  74   1          cmd = (cmd&0x9F)|0x60;
  75   1      
  76   1        I2C_w(TMP100_SLA_ADDR, TMP100_CON_ADDR, &cmd, 1);
  77   1      }
  78          /****************************************/
  79          /* Set range of tmp100          */
  80          /* range(2-steps):            */
  81          /*  ran=0: -25~85;            */
  82          /*  ran=1: -55~125.           */
  83          /****************************************/
  84          void tmpSetRange(uint ran){
  85   1        uchar cmd[2];
  86   1      
  87   1        tmpPre();
  88   1        
  89   1        // temperature low
  90   1        if(ran){
  91   2          cmd[0] = 0xC9;
  92   2          cmd[1] = 0x00;
  93   2        }else{
  94   2          cmd[0] = 0xE7;
  95   2          cmd[1] = 0x00;
  96   2        }
  97   1        I2C_w(TMP100_SLA_ADDR, TMP100_TML_ADDR, cmd, 2);
  98   1        
  99   1        // temperature high
 100   1        if(ran){
 101   2          cmd[0] = 0x7D;
 102   2          cmd[1] = 0x00;
 103   2        }else{
 104   2          cmd[0] = 0x55;
 105   2          cmd[1] = 0x00;
 106   2        }
 107   1        I2C_w(TMP100_SLA_ADDR, TMP100_TMH_ADDR, cmd, 2);  
 108   1      }
 109          /****************************************/
 110          /* Set Operation Mode           */
 111          /* Mode(2-steps):             */
 112          /*  mode=0: Continuous Mode;      */
 113          /*  mode=1: ShutDown Mode.        */
 114          /****************************************/
 115          void tmpSetMode(uint mode){
 116   1        uchar cmd;
 117   1      
C51 COMPILER V9.52.0.0   TMP100                                                            09/18/2014 16:25:03 PAGE 3   

 118   1        tmpPre();
 119   1      
 120   1        I2C_r(TMP100_SLA_ADDR, TMP100_CON_ADDR, &cmd, 1);
 121   1        
 122   1        if(mode)            // ShutDown Mode
 123   1          cmd = (cmd&0xFE)|0x01;
 124   1        else            // Continuous Mode
 125   1          cmd = (cmd&0xFE)|0x00;
 126   1      
 127   1        I2C_w(TMP100_SLA_ADDR, TMP100_CON_ADDR, &cmd, 1);   
 128   1      }
 129          /****************************************/
 130          /* Get temperature from tmp100      */
 131          /* Continuous Mode            */
 132          /****************************************/
 133          void tmpGetTmpCont(int *tmp){
 134   1        uchar dataRead[2];
 135   1        int *temp;
 136   1      
 137   1        // Read temperature
 138   1        I2C_r(TMP100_SLA_ADDR, TMP100_TMP_ADDR, &dataRead, 2);
 139   1        *tmp = dataRead[0];
 140   1        //LCD_show(*tmp<<4);DelayMS(1000);
 141   1        *temp = dataRead[1];
 142   1        //LCD_show(*temp>>4);DelayMS(1000);
 143   1        *tmp = (*tmp<<4)|(*temp>>4);
 144   1        //LCD_show(*tmp);DelayMS(1000);
 145   1      }
 146          /****************************************/
 147          /* Get temperature from tmp100      */
 148          /* ShutDown Mode            */
 149          /****************************************/
 150          void tmpGetTmpShut(int *tmp){
 151   1        uchar cmd;
 152   1        uchar dataRead[2];
 153   1        int temp;
 154   1      
 155   1        tmpPre();
 156   1      
 157   1        // Set OS(Configuration^1) = 1
 158   1        I2C_r(TMP100_SLA_ADDR, TMP100_CON_ADDR, &cmd, 1);
 159   1        if(~(cmd&0x80) || ~(cmd&0x01))
 160   1          cmd |= 0x81;
 161   1        I2C_w(TMP100_SLA_ADDR, TMP100_CON_ADDR, &cmd, 1);
 162   1        wait(1,100);
 163   1        
 164   1        // Read temperature
 165   1        I2C_r(TMP100_SLA_ADDR, TMP100_TMP_ADDR, &dataRead, 2);
 166   1        *tmp = dataRead[0];
 167   1        //LCD_show(*tmp);DelayMS(1000);
 168   1        temp = dataRead[1];
 169   1        //LCD_show(*temp);DelayMS(1000);
 170   1        *tmp = (*tmp<<4)|(temp>>4);
 171   1        //LCD_show(*tmp);DelayMS(1000);
 172   1        
 173   1        // Set OS Back to 0
 174   1        cmd &= ~0x80;
 175   1        I2C_w(TMP100_SLA_ADDR, TMP100_CON_ADDR, &dataRead, 1);
 176   1      }
 177          
 178          /****************************************/
 179          /* Get temperature from tmp100      */
C51 COMPILER V9.52.0.0   TMP100                                                            09/18/2014 16:25:03 PAGE 4   

 180          /* Any Mode               */
 181          /****************************************/
 182          /*
 183          void tmpGetTmp(int *tmp){
 184            uchar mode;
 185          
 186            tmpPre();
 187          
 188            // Get Mode
 189            I2C_r(TMP100_SLA_ADDR, TMP100_CON_ADDR, &mode, 1);
 190          
 191            if(mode&(0x01))
 192              tmpGetTmpShut(tmp);
 193            else
 194              tmpGetTmpCont(tmp); 
 195          }
 196          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    661    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      28
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
