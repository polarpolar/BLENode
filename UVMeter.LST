C51 COMPILER V9.52.0.0   UVMETER                                                           09/11/2014 16:54:01 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE UVMETER
OBJECT MODULE PLACED IN UVMeter.OBJ
COMPILER INVOKED BY: E:\KeilC\Keil2\C51\BIN\C51.EXE UVMeter.c LARGE BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /****************************************/
   2          /* Configure Funcion for UV_Meter(head) */
   3          /* Light Sensor                         */
   4          /* Author: Wu Tongda                    */
   5          /* Tsinghua EE NICS                     */
   6          /* Final Time: 2014/09/04               */
   7          /****************************************/
   8          #include "UVMeter.h"
   9          #include "LCD.h"
  10          
  11          /*****************************************************/
  12          /*Prepare for I2C bus for UVMeter to be standby-mode */
  13          /*                                                   */
  14          /*  Set HW_KEY, Enter StandBy Mode finally           */
  15          /*                                                   */
  16          /*****************************************************/
  17          void uvPre(){
  18   1        uchar* command;
  19   1        
  20   1        I2C_rst();
  21   1        I2C_initial();
  22   1        
  23   1        //  wait 25ms at least for init-mode to standby-mode
  24   1        DelayMS(25);
  25   1        
  26   1        // prepare UV Meter
  27   1        command[0] = 0x17;
  28   1        I2C_w(SLAVE_ADDR, HW_KEY, command, 1);
  29   1        DelayUS(10);
  30   1      }
  31          /*****************************************************/
  32          /* Software reset                                    */
  33          /*                                                   */
  34          /*  Configure PART_ID, REV_ID, SEQ_ID to default     */
  35          /*                                                   */
  36          /*****************************************************/
  37          void uvReset(){
  38   1        uchar* command;
  39   1        
  40   1        // send software reset command
  41   1        command[0] = SOFTWARE_RESET;
  42   1        I2C_write(SLAVE_ADDR, command, 1);
  43   1        DelayUS(10);
  44   1      }
  45          /*****************************************************/
  46          /* Set Force Measure Mode                            */
  47          /*                                                   */
  48          /*  Set Meas_Rate to Zero to active the mode         */
  49          /*                                                   */
  50          /*****************************************************/
  51          void setForceMode(){
  52   1        uchar* command;
  53   1        
  54   1        // MEAS_RATE set to force mode
  55   1        command[0] = 0x00;
C51 COMPILER V9.52.0.0   UVMETER                                                           09/11/2014 16:54:01 PAGE 2   

  56   1        command[1] = 0x00;
  57   1        I2C_w(SLAVE_ADDR, (MEAS_RATE0|0x40), command, 2);
  58   1        DelayUS(10);
  59   1        
  60   1        // Reset the Interrupt
  61   1        I2C_r(SLAVE_ADDR, IRQ_STATUS, command, 1);
  62   1        command[0] = command[0]|0x20; // CMD_INT = 1
  63   1        I2C_w(SLAVE_ADDR, IRQ_STATUS, command, 1);
  64   1        DelayUS(10);
  65   1        
  66   1        // Send ALS_FORCE command for each measurement
  67   1      }
  68          /*****************************************************/
  69          /* Set Autonomous Measure Mode                       */
  70          /*                                                   */
  71          /*  1.Set Meas_Rate to non-Zero to active the mode   */
  72          /*  2.Send ALS_AUTO command at standby mode to start */
  73          /*                                                   */
  74          /*****************************************************/
  75          void setAutonomousMode(int meas_rate){
  76   1        uchar* command;
  77   1        
  78   1        // MEAS_RATE set to auto mode
  79   1        command[0] = meas_rate%16;
  80   1        command[1] = meas_rate/16;
  81   1        I2C_w(SLAVE_ADDR, (MEAS_RATE0|0x40), command, 2);
  82   1        DelayUS(10);
  83   1        
  84   1        // Need to be at standby-mode
  85   1        // Send ALS_AUTO Command
  86   1        command[0] = ALS_AUTO;
  87   1        I2C_w(SLAVE_ADDR, COMMAND, command, 1);
  88   1        DelayUS(10);
  89   1      }
  90          /*****************************************************/
  91          /* Set ALS_VIS Mode                                  */
  92          /*                                                   */
  93          /*  1.I2C regs:                                      */
  94          /*    1) Interrupt enable, interrupt output enable   */
  95          /*  2.RAM PARAM:
  96          /*    1) CHLIST: choose VIS                          */
  97          /*    2) ALS_ENCODING: choose VIS                    */
  98          /*    2) ALS_VIS_ADC_GAIN: set resolution 1lx        */
  99          /*    2) ALS_VIS_ADC_MISC: Set range normal range    */
 100          /*                                                   */
 101          /*****************************************************/
 102          void setALSVISMode(){
 103   1        uchar* command;
 104   1        
 105   1        /********* I2C regs: Set interrupt enable *********/
 106   1        // interrupt output pin enable 
 107   1        command[0] = 0x01;
 108   1        I2C_w(SLAVE_ADDR, INT_CFG, command, 1);
 109   1        DelayUS(10);
 110   1        
 111   1        // interrupt enable 
 112   1        command[0] = 0x01;
 113   1        I2C_w(SLAVE_ADDR, IRQ_ENABLE, command, 1);
 114   1        DelayUS(10);
 115   1        
 116   1        /********* RAM PARAM: configuration CHLIST for param *********/
 117   1        // write command to PARAM_WR: set set als_via
C51 COMPILER V9.52.0.0   UVMETER                                                           09/11/2014 16:54:01 PAGE 3   

 118   1        command[0] = 0x10;    // CHLIST command
 119   1        I2C_w(SLAVE_ADDR, PARAM_WR, command, 1);
 120   1        DelayUS(10);
 121   1        // set command to COMMAND and the device write PARAM_WR to CHILIST_ADDR
 122   1        command[0] = (0x80|CHLIST); // set CHLIST addr
 123   1        I2C_w(SLAVE_ADDR, COMMAND, command, 1);
 124   1        DelayUS(10);
 125   1        
 126   1        /********* RAM PARAM: Set ALS output encoding *********/
 127   1        // write command to PARAM_WR: output set to VIS
 128   1        command[0] = 0x10;  // set ALS_ENCODING to VIS
 129   1        I2C_w(SLAVE_ADDR, PARAM_WR, command, 1);
 130   1        DelayUS(10);
 131   1        // set command to COMMAND and the device write PARAM_WR to ALS_ENCODING
 132   1        command[0] = (0x80|ALS_ENCODING); // set ALS_ENCODING addr
 133   1        I2C_w(SLAVE_ADDR, COMMAND, command, 1);
 134   1        DelayUS(10);
 135   1        
 136   1        /********* RAM PARAM: Set resolution/ADC recover time *********/
 137   1        // write command to PARAM_WR: 3.15us
 138   1        command[0] = 0x40;  // set ALS_VIS_ADC_COUNTER to 3.15
 139   1        I2C_w(SLAVE_ADDR, PARAM_WR, command, 1);
 140   1        DelayUS(10);
 141   1        // set command to COMMAND and the device write PARAM_WR to ALS_VIS_ADC_COUNTER
 142   1        command[0] = (0x80|ALS_VIS_ADC_COUNTER);  // set ALS_VIS_ADC_COUNTER addr
 143   1        I2C_w(SLAVE_ADDR, COMMAND, command, 1);
 144   1        DelayUS(10);
 145   1        // write command to PARAM_WR: 1lx
 146   1        command[0] = 0x00;  // set ALS_VIS_ADC_GAIN to 0x0,1lx
 147   1        I2C_w(SLAVE_ADDR, PARAM_WR, command, 1);
 148   1        DelayUS(10);
 149   1        // set command to COMMAND and the device write PARAM_WR to ALS_VIS_ADC_GAIN
 150   1        command[0] = (0x80|ALS_VIS_ADC_GAIN); // set ALS_VIS_ADC_GAIN addr
 151   1        I2C_w(SLAVE_ADDR, COMMAND, command, 1);
 152   1        DelayUS(10);
 153   1        
 154   1        /********* RAM PARAM: Set range *********/
 155   1        // write command to PARAM_WR: normal range
 156   1        command[0] = 0x00;  // set ALS_VIS_ADC_MISC to normal range
 157   1        I2C_w(SLAVE_ADDR, PARAM_WR, command, 1);
 158   1        DelayUS(10);
 159   1        // set command to COMMAND and the device write PARAM_WR to ALS_VIS_ADC_MISC
 160   1        command[0] = (0x80|ALS_VIS_ADC_MISC); // set ALS_VIS_ADC_MISC addr
 161   1        I2C_w(SLAVE_ADDR, COMMAND, command, 1);
 162   1        DelayUS(10);
 163   1      }
 164          
 165          // Set UV Mode
 166          void setUVMode(){
 167   1        uchar* command;
 168   1        
 169   1        // configuration i2c regs
 170   1        // write UCOEF[3:0]
 171   1        command[0] = 0x00;
 172   1        command[1] = 0x02;
 173   1        command[2] = 0x89;
 174   1        command[3] = 0x29;
 175   1        I2C_w(SLAVE_ADDR, (UCOEF0|0x40), command, 4);
 176   1        DelayUS(10);
 177   1        
 178   1        // configuration param rams
 179   1        // write command to PARAM_WR
C51 COMPILER V9.52.0.0   UVMETER                                                           09/11/2014 16:54:01 PAGE 4   

 180   1        command[0] = 0x80;    // CHLIST command, set EN_UV;
 181   1        I2C_w(SLAVE_ADDR, PARAM_WR, command, 1);
 182   1        DelayUS(10);
 183   1        
 184   1        command[0] = 0x81;  // set CHLIST addr
 185   1        I2C_w(SLAVE_ADDR, COMMAND, command, 1);
 186   1        DelayUS(10);
 187   1        
 188   1        /********* I2C regs: Set interrupt enable *********/
 189   1        // interrupt output pin enable 
 190   1        command[0] = 0x01;
 191   1        I2C_w(SLAVE_ADDR, INT_CFG, command, 1);
 192   1        DelayUS(10);
 193   1        
 194   1        // interrupt enable 
 195   1        command[0] = 0x01;
 196   1        I2C_w(SLAVE_ADDR, IRQ_ENABLE, command, 1);
 197   1        DelayUS(10);
 198   1      }
 199          
 200          void getForceData(){
 201   1        uchar* command;
 202   1        
 203   1        // Send ALS_FORCE Command (Need to be at standby-mode)
 204   1        command[0] = ALS_FORCE;
 205   1        I2C_w(SLAVE_ADDR, COMMAND, command, 1);
 206   1        DelayUS(10);
 207   1      }
 208          
 209          void getALSVISData(int* als_visData){
 210   1        uchar* tempData;
 211   1        //uchar* tempInt;
 212   1        // wait 285us?? didn't mentioned
 213   1        //DelayUS(285);
 214   1        
 215   1        // Read the interrupt
 216   1        //while(INT);
 217   1        // Read vis data from regs
 218   1        I2C_r(SLAVE_ADDR, (ALS_VIS_DATA0|0x00), tempData, 2);
 219   1        *als_visData = tempData[1];
 220   1        *als_visData = (*als_visData<<8)|tempData[0];
 221   1          
 222   1        // Clear INT
 223   1        // read the ALS_INT first
 224   1        //I2C_r(SLAVE_ADDR, (IRQ_STATUS|0x00), tempInt, 1);
 225   1        // re-write the ALS_INT
 226   1        //I2C_w(SLAVE_ADDR, (IRQ_STATUS|0x00), tempInt, 1);
 227   1      }
 228          
 229          void getUVData(int* uvData){
 230   1        uchar* tempData;
 231   1        // wait 285us
 232   1        DelayUS(285);
 233   1        
 234   1        // Read uv data from regs
 235   1        I2C_r(SLAVE_ADDR, (AUX_DATA0|0x40), tempData, 2);
 236   1        
 237   1        *uvData = tempData[1];
 238   1        *uvData = (*uvData<<8)|tempData[0]/100;
 239   1      }
 240          

C51 COMPILER V9.52.0.0   UVMETER                                                           09/11/2014 16:54:01 PAGE 5   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1489    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      35
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
