C51 COMPILER V9.52.0.0   UVMETER                                                           09/18/2014 16:25:03 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE UVMETER
OBJECT MODULE PLACED IN UVMeter.OBJ
COMPILER INVOKED BY: E:\KeilC\Keil2\C51\BIN\C51.EXE UVMeter.c BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /****************************************/
   2          /* Configure Funcion for UV_Meter(head) */
   3          /* Light Sensor                         */
   4          /* Author: Wu Tongda                    */
   5          /* Tsinghua EE NICS                     */
   6          /* Final Time: 2014/09/04               */
   7          /****************************************/
   8          #include "UVMeter.h"
   9          #include "LCD.h"
  10          
  11          /*****************************************************/
  12          /* Data Write to I2C Regs                            */
  13          /*****************************************************/
  14          void writeToRegister(uchar regAddr, uchar command[2], int n){
  15   1        I2C_w(SLAVE_ADDR, regAddr, command, n);
  16   1        DelayUS(10);
  17   1      }
  18          /*****************************************************/
  19          /* Data read to I2C Regs                             */
  20          /*****************************************************/
  21          void readFromRegister(uchar regAddr, uchar command[2], int n){
  22   1        I2C_r(SLAVE_ADDR, regAddr, command, n);
  23   1        DelayUS(10);
  24   1      }
  25          /*****************************************************/
  26          /* Data Write to Ram Param                           */
  27          /*****************************************************/
  28          void writeToParameter(uchar paramAddr, uchar command){
  29   1        uchar destAddr[2];
  30   1        destAddr[0] = 0xA0|paramAddr;
  31   1        // write command to PARAM_WR
  32   1        I2C_w(SLAVE_ADDR, PARAM_WR, &command, 1);
  33   1        DelayUS(10);
  34   1        // set command to COMMAND and the device write PARAM_WR to destiny
  35   1        I2C_w(SLAVE_ADDR, COMMAND, destAddr, 1);
  36   1        DelayUS(10);
  37   1      }
  38          /*****************************************************/
  39          /* Data Read from Ram Param                          */
  40          /*****************************************************/
  41          void readFromParameter(uchar paramAddr, uchar command){
  42   1        // set command to COMMAND and the device write destiny to PARAM_RD
  43   1        uchar destAddr[2];
  44   1        destAddr[0] = 0x80|paramAddr;
  45   1        I2C_w(SLAVE_ADDR, COMMAND, destAddr, 1);
  46   1        DelayUS(10);
  47   1        // read inform from PARAM_RD
  48   1        I2C_r(SLAVE_ADDR, PARAM_RD, &command, 1);
  49   1        DelayUS(10);
  50   1      }
  51          /*****************************************************/
  52          /*Prepare for I2C bus for UVMeter to be standby-mode */
  53          /*                                                   */
  54          /*  Set HW_KEY, Enter StandBy Mode finally           */
  55          /*                                                   */
C51 COMPILER V9.52.0.0   UVMETER                                                           09/18/2014 16:25:03 PAGE 2   

  56          /*****************************************************/
  57          void uvPre(){
  58   1        uchar command[2];
  59   1        
  60   1        I2C_rst();
  61   1        I2C_initial();
  62   1        DelayMS(100); // wait from init to standby
  63   1        
  64   1        // prepare UV Meter/Send hardware key
  65   1        command[0] = 0x17;
  66   1        writeToRegister(HW_KEY, command, 1);
  67   1        readFromRegister(HW_KEY, command, 1);
  68   1      }
  69          /*****************************************************/
  70          /* Software reset                                    */
  71          /*                                                   */
  72          /*  Configure PART_ID, REV_ID, SEQ_ID to default     */
  73          /*                                                   */
  74          /*****************************************************/
  75          void uvReset(){
  76   1        uchar command[2];
  77   1        
  78   1        // send software reset command
  79   1        command[0] = SOFTWARE_RESET;
  80   1        writeToRegister(COMMAND, command, 1);
  81   1        readFromRegister(COMMAND, command, 1);
  82   1      }
  83          /*****************************************************/
  84          /* Set Force Measure Mode                            */
  85          /*                                                   */
  86          /*  Set Meas_Rate to Zero to active the mode         */
  87          /*                                                   */
  88          /*****************************************************/
  89          void setForceMode(){
  90   1        uchar command[2];
  91   1        
  92   1        // MEAS_RATE set to force mode
  93   1        command[0] = 0x00;
  94   1        command[1] = 0x00;
  95   1        writeToRegister(MEAS_RATE0, command, 2);
  96   1        readFromRegister(MEAS_RATE0, command, 2);
  97   1        
  98   1        /********* I2C regs: Set interrupt enable *********/
  99   1        // interrupt output pin enable 
 100   1        command[0] = 0x01;
 101   1        writeToRegister(INT_CFG, command, 1);
 102   1        readFromRegister(INT_CFG, command, 1);
 103   1        // interrupt enable 
 104   1        command[0] = 0x01;
 105   1        writeToRegister(IRQ_ENABLE, command, 1);
 106   1        readFromRegister(IRQ_ENABLE, command, 1);
 107   1        
 108   1        // Reset the Interrupt
 109   1        //readFromRegister(IRQ_STATUS, command, 1);
 110   1        //writeToRegister(IRQ_STATUS, command, 1);
 111   1        
 112   1        // Send ALS_FORCE command for each measurement
 113   1      }
 114          /*****************************************************/
 115          /* Set Autonomous Measure Mode                       */
 116          /*                                                   */
 117          /*  1.Set Meas_Rate to non-Zero to active the mode   */
C51 COMPILER V9.52.0.0   UVMETER                                                           09/18/2014 16:25:03 PAGE 3   

 118          /*  2.Send ALS_AUTO command at standby mode to start */
 119          /*                                                   */
 120          /*****************************************************/
 121          /*void setAutonomousMode(int meas_rate){
 122            uchar command[2];
 123            
 124            // MEAS_RATE set to auto mode
 125            command[0] = meas_rate%16;
 126            command[1] = meas_rate/16;
 127            writeToRegister(MEAS_RATE0, &command, 2);
 128            
 129            // Need to be at standby-mode
 130            // Send ALS_AUTO Command
 131            command[0] = ALS_AUTO;
 132            writeToRegister(COMMAND, &command, 1);
 133          }*/
 134          /*****************************************************/
 135          /* Set ALS_VIS Mode                                  */
 136          /*                                                   */
 137          /*  1.I2C regs:                                      */
 138          /*    1) Interrupt enable, interrupt output enable   */
 139          /*  2.RAM PARAM:
 140          /*    1) CHLIST: choose VIS                          */
 141          /*    2) ALS_ENCODING: choose VIS                    */
 142          /*    2) ALS_VIS_ADC_GAIN: set resolution 1lx        */
 143          /*    2) ALS_VIS_ADC_MISC: Set range normal range    */
 144          /*                                                   */
 145          /*****************************************************/
 146          void setALSVISMode(){
 147   1        uchar command[2];
 148   1        
 149   1        /********* RAM PARAM: configuration CHLIST for param *********/
 150   1        // write command to CHILIST: set set als_via
 151   1        writeToParameter(CHLIST, 0x10);
 152   1        readFromParameter(CHLIST, command);
*** WARNING C214 IN LINE 152 OF UVMeter.c: 'Argument': conversion: pointer to non-pointer
 153   1        
 154   1        /********* RAM PARAM: Set ALS output encoding *********/
 155   1        // write command to ALS_ENCODING: output set to VIS
 156   1        writeToParameter(ALS_ENCODING, 0x10);
 157   1        readFromParameter(ALS_ENCODING, command);
*** WARNING C214 IN LINE 157 OF UVMeter.c: 'Argument': conversion: pointer to non-pointer
 158   1        
 159   1        /********* RAM PARAM: Set resolution/ADC recover time *********/
 160   1        // write command to ALS_VIS_ADC_COUNTER: 3.15us
 161   1        writeToParameter(ALS_VIS_ADC_COUNTER, 0x40);
 162   1        readFromParameter(ALS_VIS_ADC_COUNTER, command);
*** WARNING C214 IN LINE 162 OF UVMeter.c: 'Argument': conversion: pointer to non-pointer
 163   1        // write command to ALS_VIS_ADC_GAIN: 1lx
 164   1        writeToParameter(ALS_VIS_ADC_GAIN, 0x00);
 165   1        readFromParameter(ALS_VIS_ADC_GAIN, command);
*** WARNING C214 IN LINE 165 OF UVMeter.c: 'Argument': conversion: pointer to non-pointer
 166   1        
 167   1        
 168   1        /********* RAM PARAM: Set range *********/
 169   1        // write command to ALS_VIS_ADC_MISC: normal range
 170   1        writeToParameter(ALS_VIS_ADC_MISC, 0x00);
 171   1        readFromParameter(ALS_VIS_ADC_MISC, command);
*** WARNING C214 IN LINE 171 OF UVMeter.c: 'Argument': conversion: pointer to non-pointer
 172   1      }
 173          
 174          // Set UV Mode
C51 COMPILER V9.52.0.0   UVMETER                                                           09/18/2014 16:25:03 PAGE 4   

 175          /*void setUVMode(){
 176            uchar command[2];
 177            
 178            /********* I2C regs: Set UV coefficience *********//*
 179            // write UCOEF[3:0]
 180            command[0] = 0x00;
 181            command[1] = 0x02;
 182            command[2] = 0x89;
 183            command[3] = 0x29;
 184            writeToRegister(UCOEF0, &command, 4);
 185            
 186            /********* I2C regs: Set interrupt enable *********//*
 187            // interrupt output pin enable 
 188            command[0] = 0x01;
 189            writeToRegister(INT_CFG, &command, 1);
 190            // interrupt enable 
 191            command[0] = 0x01;
 192            writeToRegister(IRQ_ENABLE, &command, 1);
 193            
 194            /********* RAM PARAM: Set range *********//*
 195            // write command to CHLIST: EN_UV
 196            writeToParameter(CHLIST, 0x80);
 197          }*/
 198          
 199          void startForceMeas(){
 200   1        uchar command[2];
 201   1        
 202   1        // Send ALS_FORCE Command (Need to be at standby-mode)
 203   1        command[0] = ALS_FORCE;
 204   1        writeToRegister(COMMAND, command,1);
 205   1        readFromRegister(COMMAND, command, 1);
 206   1      }
 207          
 208          void getALSVISData(int* als_visData){
 209   1        uchar tempData[2];
 210   1        uchar tempInt[1];
 211   1        // wait 285us?? didn't mentioned
 212   1        wait(1,1000);
 213   1        
 214   1        // Read the interrupt
 215   1        //while(INT);
 216   1        // Read vis data from regs
 217   1        readFromRegister(ALS_VIS_DATA0, tempData, 2);
 218   1        /*LCD_show(tempData[0]);
 219   1        wait(3,1000);
 220   1        LCD_show(0xAAAA);
 221   1        wait(3,1000);
 222   1        LCD_show(tempData[1]);
 223   1        wait(3,1000);*/
 224   1        *als_visData = (tempData[1]<<8)|tempData[0];
 225   1          
 226   1        // Clear INT
 227   1        // read the ALS_INT first
 228   1        I2C_r(SLAVE_ADDR, IRQ_STATUS, tempInt, 1);
 229   1        // re-write the ALS_INT
 230   1        I2C_w(SLAVE_ADDR, IRQ_STATUS, tempInt, 1);
 231   1      }
 232          
 233          /*void getUVData(int* uvData){
 234            uchar* tempData;
 235            // wait 285us
 236            DelayUS(285);
C51 COMPILER V9.52.0.0   UVMETER                                                           09/18/2014 16:25:03 PAGE 5   

 237            
 238            // Read uv data from regs
 239            readFromRegister(AUX_DATA0, &tempData, 2);
 240            
 241            *uvData = tempData[1];
 242            *uvData = (*uvData<<8)|tempData[0]/100;
 243          }*/
 244          
 245          void circleData(int* tmp){
 246   1        uchar meas[2];
 247   1        
 248   1        readFromRegister(MEAS_RATE0, meas, 2);
 249   1        *tmp = (meas[0]<<8)|meas[1];
 250   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    560    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      39
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  5 WARNING(S),  0 ERROR(S)
